import argparse
import json        

def convert_code(solution_code):
    solution_code = solution_code.replace("\\\\", "PLACEHOLDER")
    # solution_code = solution_code.replace("\\\\", "\\")
    solution_code = solution_code.replace("\\n", "\n")
    solution_code = solution_code.replace("\\t", "\t")
    solution_code = solution_code.replace("\\r", "\r")
    solution_code = solution_code.replace("\\\'", "\'")
    solution_code = solution_code.replace("\\\"", "\"")
    solution_code = solution_code.replace("PLACEHOLDER", "\\")
    return solution_code

# input_code = "import math\n\ndef prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n == 1:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef is_prime_factor(n, p):\n    if n % p == 0:\n        return True\n    return False\n\ndef is_prime_factor_pair(n, p, q):\n    if is_prime_factor(n, p) and is_prime_factor(n, q):\n        return True\n    return False\n\ndef find_prime_factors(n):\n    i = 2\n    factors = []\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            factors.append(i)\n    if n > 1:\n        factors.append(n)\n    return factors\n\ndef find_prime_factor_pairs(n):\n    prime_factors = find_prime_factors(n)\n    prime_factor_pairs = []\n    for i in range(len(prime_factors)):\n        for j in range(i + 1, len(prime_factors)):\n            prime_factor_pairs.append((prime_factors[i], prime_factors[j]))\n    return prime_factor_pairs\n\ndef find_prime_factor_pair(n):\n    prime_factor_pairs = find_prime_factor_pairs(n)\n    for prime_factor_pair in prime_factor_pairs:\n        if is_prime_factor_pair(n, prime_factor_pair[0], prime_factor_pair[1]):\n            return prime_factor_pair\n    return None\n\ndef main():\n    t = int(input())\n    for i in range(t):\n        n = int(input())\n        prime_factor_pair = find_prime_factor_pair(n)\n        print(prime_factor_pair[0], prime_factor_pair[1])\n\nif __name__ == '__main__':\n    main()"
# input_code = "import math\n\ndef is_prime(n):\n    if n == 2:\n        return True\n    if n % 2 == 0 or n <= 1:\n        return False\n    sqr = int(math.sqrt(n)) + 1\n    for divisor in range(3, sqr, 2):\n        if n % divisor == 0:\n            return False\n    return True\n\ndef get_factors(n):\n    factors = []\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n // i)\n    return factors\n\ndef get_base(n):\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            return i, n // i\n\ndef get_base_list(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_2(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_3(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_4(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_5(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_6(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_7(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_8(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_9(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_10(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_11(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_12(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_13(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_14(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_15(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_16(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_17(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_18(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_19(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_20(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_21(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_22(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_23(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_24(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_25(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_26(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_27(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list\n\ndef get_base_list_28(n):\n    base_list = []\n    for i in range(2, n):\n        if is_prime(i) and is_prime(n // i):\n            base_list.append((i, n // i))\n    return base_list"
input_code = '"""def solve(n, pawns, enemy):\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            if enemy[i][j] == 1:\n                dp[i][j] = 1\n            elif pawns[i][j] == 1:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i-1][j-1], dp[i-1][j+1])\n    return dp[n-1][0]\n\nif __name__ == "__main__":\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        pawns = [list(map(int, input().split())) for _ in range(n)]\n        enemy = [list(map(int, input().split())) for _ in range(n)]\n        print(solve(n, pawns, enemy))'
output_code = convert_code(input_code)
print(output_code)